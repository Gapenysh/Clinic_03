Index: Clinic/dal_models/service_dal.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Clinic/dal_models/service_dal.py b/Clinic/dal_models/services_dal.py
rename from Clinic/dal_models/service_dal.py
rename to Clinic/dal_models/services_dal.py
--- a/Clinic/dal_models/service_dal.py	(revision cac0f9a2f0a7b6225fa6b08e49bef11b1cb0d7f2)
+++ b/Clinic/dal_models/services_dal.py	(date 1736674690137)
@@ -1,42 +1,28 @@
-from psycopg2 import Error
-
 from Clinic.db_connection import connection_db
+import psycopg2.extras
 
-def formate_data(result, colnames):
-    formated_data = [
-        dict(zip(colnames, row))
-        for row in result
-    ]
-    return formated_data
 class ServiceDal:
-
     @staticmethod
     def get_all_specialities():
         conn = connection_db()
         try:
-            with conn.cursor() as cur:
-                stmt = """SELECT * FROM speciality"""
-                cur.execute(stmt)
-                result = cur.fetchall()
-                colnames = [desc[0] for desc in cur.description]
-                result = formate_data(result, colnames)
-                return result, None
-        except Error as e:
+            with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
+                query = '''
+                    SELECT 
+                        specialties.id AS specialty_id,
+                        specialties.specialty_name,
+                        services.id AS service_id,
+                        services.service_name,
+                        services.price
+                    FROM 
+                        specialties
+                    LEFT JOIN 
+                        services ON specialties.id = services.speciality_id;
+                '''
+                cursor.execute(query)
+                data = cursor.fetchall()
+                return data, None
+        except Exception as e:
             return None, str(e)
         finally:
             conn.close()
-    @staticmethod
-    def get_services(doc_spec_id:int):
-        conn = connection_db()
-        try:
-            with conn.cursor() as cur:
-                stmt = """SELECT name, price FROM service WHERE doctor_specialty_id = %s"""
-                cur.execute(stmt, (doc_spec_id,))
-                result = cur.fetchall()
-                colnames = [desc[0] for desc in cur.description]
-                result = formate_data(result, colnames)
-                return result, None
-        except Error as e:
-            return None, str(e)
-        finally:
-            conn.close()
\ No newline at end of file
Index: Clinic/services/service_routes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Blueprint, jsonify, request\r\nfrom Clinic.bl_models.service_bl import ServiceBL\r\n\r\nservices_route = Blueprint(\"services_route\", __name__)\r\n\r\n\r\n@services_route.route(\"/services\", methods=[\"GET\"])\r\ndef get_services_by_speciality_id():\r\n    specialities = ServiceBL.get_specialities()\r\n\r\n    speciality_id = request.args.get(\"spec_id\", None)\r\n\r\n    services = ServiceBL.get_services(speciality_id)\r\n\r\n    return jsonify({\"Specialities\": f\"{specialities}: \"},\r\n                   {\"Services\": f\"{services}\"},)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Clinic/services/service_routes.py b/Clinic/services/service_routes.py
--- a/Clinic/services/service_routes.py	(revision cac0f9a2f0a7b6225fa6b08e49bef11b1cb0d7f2)
+++ b/Clinic/services/service_routes.py	(date 1736674722639)
@@ -1,16 +1,13 @@
-from flask import Blueprint, jsonify, request
-from Clinic.bl_models.service_bl import ServiceBL
+from flask import Blueprint, jsonify
+from Clinic.bl_models.services_bl import ServiceBL
 
 services_route = Blueprint("services_route", __name__)
 
-
 @services_route.route("/services", methods=["GET"])
-def get_services_by_speciality_id():
-    specialities = ServiceBL.get_specialities()
+def get_services():
+    data, error = ServiceBL.get_specialities()
+    if error:
+        return jsonify({"error": error}), 500
 
-    speciality_id = request.args.get("spec_id", None)
+    return jsonify(data), 200
 
-    services = ServiceBL.get_services(speciality_id)
-
-    return jsonify({"Specialities": f"{specialities}: "},
-                   {"Services": f"{services}"},)
Index: Clinic/bl_models/service_bl.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Clinic/bl_models/service_bl.py b/Clinic/bl_models/services_bl.py
rename from Clinic/bl_models/service_bl.py
rename to Clinic/bl_models/services_bl.py
--- a/Clinic/bl_models/service_bl.py	(revision cac0f9a2f0a7b6225fa6b08e49bef11b1cb0d7f2)
+++ b/Clinic/bl_models/services_bl.py	(date 1736674712592)
@@ -1,20 +1,29 @@
-from Clinic.dal_models.service_dal import ServiceDal
+from Clinic.dal_models.services_dal import ServiceDal
 
 class ServiceBL:
 
     @staticmethod
     def get_specialities():
-        specialities, error = ServiceDal.get_all_specialities()
-        if specialities:
-            return specialities
-        else:
-            print(error)
-            return None
-    @staticmethod
-    def get_services(speciality_id:int):
-        services, error = ServiceDal.get_services(speciality_id)
-        if services:
-            return services
-        else:
-            print(error)
-            return None
\ No newline at end of file
+        data, error = ServiceDal.get_all_specialities()
+        if error:
+            return None, error
+
+        # Преобразование данных в удобный JSON-формат
+        result = {}
+        for row in data:
+            specialty_id = row["specialty_id"]
+            if specialty_id not in result:
+                result[specialty_id] = {
+                    "id": specialty_id,
+                    "name": row["specialty_name"],
+                    "services": []
+                }
+
+            if row["service_id"]:
+                result[specialty_id]["services"].append({
+                    "id": row["service_id"],
+                    "name": row["service_name"],
+                    "price": row["price"]
+                })
+
+        return list(result.values()), None
Index: Clinic/dal_models/analysis_dal.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Clinic.db_connection import connection_db\r\ndef formate_data(result, colnames):\r\n    formated_data = [\r\n        dict(zip(colnames, row))\r\n        for row in result\r\n    ]\r\n    return formated_data\r\nclass AnalyseDAL(object):\r\n    @staticmethod\r\n    def add_analyse(name: str, price: int, check_up_id: int):\r\n        pass
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Clinic/dal_models/analysis_dal.py b/Clinic/dal_models/analysis_dal.py
--- a/Clinic/dal_models/analysis_dal.py	(revision cac0f9a2f0a7b6225fa6b08e49bef11b1cb0d7f2)
+++ b/Clinic/dal_models/analysis_dal.py	(date 1736671877702)
@@ -1,11 +1,33 @@
 from Clinic.db_connection import connection_db
-def formate_data(result, colnames):
-    formated_data = [
-        dict(zip(colnames, row))
-        for row in result
-    ]
-    return formated_data
+import psycopg2.extras
+
 class AnalyseDAL(object):
     @staticmethod
-    def add_analyse(name: str, price: int, check_up_id: int):
-        pass
\ No newline at end of file
+    def get_analysis():
+        conn = connection_db()
+
+        try:
+            with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:  # Используем DictCursor
+                query = '''
+                    SELECT 
+                        categories.id AS category_id,
+                        categories.name AS category_name,
+                        analysis.id AS analysis_id,
+                        analysis.name AS analysis_name,
+                        analysis.price
+                    FROM 
+                        categories
+                    JOIN 
+                        analysis_categories ON categories.id = analysis_categories.category_id
+                    JOIN 
+                        analysis ON analysis.id = analysis_categories.analysis_id
+                '''
+                cursor.execute(query)
+                analysis_data = cursor.fetchall()
+                return analysis_data, None
+
+        except Exception as e:
+            return None, str(e)
+
+        finally:
+            conn.close()
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"860926a3-b9fb-4eb7-98ac-2216615eb45d\" name=\"Changes\" comment=\"make record routes\">\r\n      <change afterPath=\"$PROJECT_DIR$/Clinic/.env\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Clinic/bl_models/records_bl.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Clinic/bl_models/records_bl.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Clinic/dal_models/records_dal.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Clinic/dal_models/records_dal.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Clinic/records/bids_route.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Clinic/records/bids_route.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/poetry.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/poetry.lock\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Gapenysh&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Gapenysh/Clinic_03.git&quot;,\r\n    &quot;accountId&quot;: &quot;553dbff4-694e-4fbb-b85b-3c527105cef2&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2oAqAUC1vaReYnuswCdOZsuznrg\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.run.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-0e3be3396995-c546a90a8094-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-242.23339.19\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"860926a3-b9fb-4eb7-98ac-2216615eb45d\" name=\"Changes\" comment=\"\" />\r\n      <created>1730322584600</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1730322584600</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"make structure for project\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730323806841</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730323806842</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"make record routes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731393242066</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731393242066</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"make structure for project\" />\r\n    <MESSAGE value=\"make record routes\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"make record routes\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision cac0f9a2f0a7b6225fa6b08e49bef11b1cb0d7f2)
+++ b/.idea/workspace.xml	(date 1736670680864)
@@ -4,13 +4,16 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="860926a3-b9fb-4eb7-98ac-2216615eb45d" name="Changes" comment="make record routes">
+    <list default="true" id="860926a3-b9fb-4eb7-98ac-2216615eb45d" name="Changes" comment="added bids route">
       <change afterPath="$PROJECT_DIR$/Clinic/.env" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Clinic/bl_models/records_bl.py" beforeDir="false" afterPath="$PROJECT_DIR$/Clinic/bl_models/records_bl.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Clinic/dal_models/records_dal.py" beforeDir="false" afterPath="$PROJECT_DIR$/Clinic/dal_models/records_dal.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Clinic/records/bids_route.py" beforeDir="false" afterPath="$PROJECT_DIR$/Clinic/records/bids_route.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/poetry.lock" beforeDir="false" afterPath="$PROJECT_DIR$/poetry.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Clinic/analysis/analysis_routes.py" beforeDir="false" afterPath="$PROJECT_DIR$/Clinic/analysis/analysis_routes.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Clinic/bl_models/analysis_bl.py" beforeDir="false" afterPath="$PROJECT_DIR$/Clinic/bl_models/analysis_bl.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Clinic/bl_models/service_bl.py" beforeDir="false" afterPath="$PROJECT_DIR$/Clinic/bl_models/services_bl.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Clinic/dal_models/analysis_dal.py" beforeDir="false" afterPath="$PROJECT_DIR$/Clinic/dal_models/analysis_dal.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Clinic/dal_models/doctors_dal.py" beforeDir="false" afterPath="$PROJECT_DIR$/Clinic/dal_models/doctors_dal.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Clinic/dal_models/service_dal.py" beforeDir="false" afterPath="$PROJECT_DIR$/Clinic/dal_models/services_dal.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Clinic/services/service_routes.py" beforeDir="false" afterPath="$PROJECT_DIR$/Clinic/services/service_routes.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -90,12 +93,21 @@
       <option name="project" value="LOCAL" />
       <updated>1731393242066</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="added bids route">
+      <option name="closed" value="true" />
+      <created>1736670042353</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1736670042353</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="make structure for project" />
     <MESSAGE value="make record routes" />
-    <option name="LAST_COMMIT_MESSAGE" value="make record routes" />
+    <MESSAGE value="added bids route" />
+    <option name="LAST_COMMIT_MESSAGE" value="added bids route" />
   </component>
 </project>
\ No newline at end of file
Index: Clinic/analysis/analysis_routes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Blueprint, request\r\n\r\nfrom Clinic.bl_models.analysis_bl import AnalyseBL\r\nanalysis_route = Blueprint(\"analysis_route\", __name__)\r\n\r\n@analysis_route.route(\"/analysis\", methods=['POST'])\r\ndef add_analysis():\r\n    data = request.get_json()\r\n\r\n    name = data.get(\"name\")\r\n    price = data.get(\"price\")\r\n\r\n    analyse_id, error = AnalyseBL.add_analyse(name, price, check_up)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Clinic/analysis/analysis_routes.py b/Clinic/analysis/analysis_routes.py
--- a/Clinic/analysis/analysis_routes.py	(revision cac0f9a2f0a7b6225fa6b08e49bef11b1cb0d7f2)
+++ b/Clinic/analysis/analysis_routes.py	(date 1736671690998)
@@ -1,13 +1,12 @@
-from flask import Blueprint, request
-
+from flask import Blueprint, jsonify
 from Clinic.bl_models.analysis_bl import AnalyseBL
+
 analysis_route = Blueprint("analysis_route", __name__)
 
-@analysis_route.route("/analysis", methods=['POST'])
-def add_analysis():
-    data = request.get_json()
+@analysis_route.route("/analysis", methods=["GET"])
+def get_analysis():
+    data, error = AnalyseBL.get_analysis()
+    if error:
+        return jsonify({"error": error}), 500
 
-    name = data.get("name")
-    price = data.get("price")
-
-    analyse_id, error = AnalyseBL.add_analyse(name, price, check_up)
\ No newline at end of file
+    return jsonify(data), 200
Index: Clinic/.env
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Clinic/.env b/Clinic/.env
new file mode 100644
--- /dev/null	(date 1734013053199)
+++ b/Clinic/.env	(date 1734013053199)
@@ -0,0 +1,4 @@
+USER=postgres
+PASSWORD=Ramzilka25917
+HOST_NAME=localhost
+DB_NAME=clinic
Index: Clinic/dal_models/doctors_dal.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from psycopg2 import Error\r\n\r\nfrom Clinic.db_connection import connection_db\r\n\r\n\r\nclass DoctorDAL(object):\r\n    @staticmethod\r\n    def get_doctors():\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = \"SELECT * FROM doctors\"\r\n                cursor.execute(query)\r\n                doctors_data = cursor.fetchall()\r\n                return doctors_data, None\r\n        except Exception as e:\r\n            return None, str(e)\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def get_doctor(doctor_id: int):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = \"SELECT * FROM doctors WHERE id = %s\"\r\n                cursor.execute(query, (doctor_id,))\r\n                doctor_data = cursor.fetchone()\r\n                return doctor_data, None\r\n        except Exception as e:\r\n            return None, str(e)\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def get_available_slots(doctor_id: int):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = \"SELECT slot_date, slot_time FROM available_slots WHERE doctor_id = %s\"\r\n                cursor.execute(query, (doctor_id,))\r\n                slots_data = cursor.fetchall()\r\n                # Преобразование данных в словари\r\n                slots_data = [{'slot_date': row[0], 'slot_time': row[1]} for row in slots_data]\r\n                return slots_data, None\r\n        except Exception as e:\r\n            return None, str(e)\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def get_qualification(doctor_id: int):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = \"SELECT name, year FROM qualifications WHERE doctor_id = %s\"\r\n\r\n                cursor.execute(query, (doctor_id,))\r\n                qualifications_data = cursor.fetchall()\r\n\r\n                return qualifications_data, None\r\n\r\n        except Exception as e:\r\n            return None, str(e)\r\n\r\n        finally:\r\n            conn.close()\r\n\r\n\r\n    @staticmethod\r\n    def get_reviews(doctor_id: int):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                query = \"SELECT patient_phone, date, review_content FROM reviews WHERE doctor_id = %s\"\r\n                cursor.execute(query, (doctor_id,))\r\n                reviews_data = cursor.fetchall()\r\n                return reviews_data, None\r\n\r\n        except Exception as e:\r\n            print(e)\r\n            return None, str(e)\r\n\r\n\r\n        finally:\r\n            conn.close()\r\n\r\n    @staticmethod\r\n    def get_specialties(doctor_id: int):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cursor:\r\n                # Первый запрос: получаем speciality_id для данного doctor_id\r\n                query = \"SELECT speciality_id FROM doctor_specialties WHERE doctor_id = %s\"\r\n                cursor.execute(query, (doctor_id,))\r\n                speciality_ids = cursor.fetchall()\r\n\r\n                if not speciality_ids:\r\n                    return [], None  # Нет специальностей для данного врача\r\n\r\n                # Преобразуем результат в список speciality_id\r\n                speciality_ids = [item[0] for item in speciality_ids]\r\n\r\n                # Второй запрос: получаем информацию о специальностях\r\n                placeholders = ','.join(['%s'] * len(speciality_ids))\r\n                query = f\"SELECT * FROM specialties WHERE id IN ({placeholders})\"\r\n                cursor.execute(query, speciality_ids)\r\n                specialties_data = cursor.fetchall()\r\n\r\n                return specialties_data, None\r\n\r\n        except Exception as e:\r\n            print(e)\r\n            return None, str(e)\r\n        finally:\r\n            conn.close()\r\n\r\n\r\n    @staticmethod\r\n    def add_doctor(name: str, rating: int, edu: str, exp: int, speciality_id: int):\r\n        conn = connection_db()\r\n        try:\r\n            with conn.cursor() as cur:\r\n                stmt_doc = \"\"\"INSERT INTO doctors(full_name, experience)\r\n                VALUES(%s, %s)\r\n                RETURNING id;\"\"\"\r\n                cur.execute(stmt_doc, (name, exp))\r\n                doctor_id = cur.fetchone()[0]\r\n\r\n                stmt_doc_spec = \"\"\"INSERT INTO speciality_doctor(doctor_id, speciality_id)\r\n                VALUES(%s, %s)\"\"\"\r\n                cur.execute(stmt_doc_spec, (doctor_id, speciality_id))\r\n                conn.commit()\r\n                return True\r\n        except Error as e:\r\n            print(str(e))\r\n            return False\r\n        finally:\r\n            conn.close()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Clinic/dal_models/doctors_dal.py b/Clinic/dal_models/doctors_dal.py
--- a/Clinic/dal_models/doctors_dal.py	(revision cac0f9a2f0a7b6225fa6b08e49bef11b1cb0d7f2)
+++ b/Clinic/dal_models/doctors_dal.py	(date 1736670379299)
@@ -7,34 +7,41 @@
     @staticmethod
     def get_doctors():
         conn = connection_db()
+
         try:
             with conn.cursor() as cursor:
                 query = "SELECT * FROM doctors"
                 cursor.execute(query)
                 doctors_data = cursor.fetchall()
                 return doctors_data, None
+
         except Exception as e:
             return None, str(e)
+
         finally:
             conn.close()
 
     @staticmethod
     def get_doctor(doctor_id: int):
         conn = connection_db()
+
         try:
             with conn.cursor() as cursor:
                 query = "SELECT * FROM doctors WHERE id = %s"
                 cursor.execute(query, (doctor_id,))
                 doctor_data = cursor.fetchone()
                 return doctor_data, None
+
         except Exception as e:
             return None, str(e)
+
         finally:
             conn.close()
 
     @staticmethod
     def get_available_slots(doctor_id: int):
         conn = connection_db()
+
         try:
             with conn.cursor() as cursor:
                 query = "SELECT slot_date, slot_time FROM available_slots WHERE doctor_id = %s"
@@ -43,21 +50,22 @@
                 # Преобразование данных в словари
                 slots_data = [{'slot_date': row[0], 'slot_time': row[1]} for row in slots_data]
                 return slots_data, None
+
         except Exception as e:
             return None, str(e)
+
         finally:
             conn.close()
 
     @staticmethod
     def get_qualification(doctor_id: int):
         conn = connection_db()
+
         try:
             with conn.cursor() as cursor:
                 query = "SELECT name, year FROM qualifications WHERE doctor_id = %s"
-
                 cursor.execute(query, (doctor_id,))
                 qualifications_data = cursor.fetchall()
-
                 return qualifications_data, None
 
         except Exception as e:
@@ -70,6 +78,7 @@
     @staticmethod
     def get_reviews(doctor_id: int):
         conn = connection_db()
+
         try:
             with conn.cursor() as cursor:
                 query = "SELECT patient_phone, date, review_content FROM reviews WHERE doctor_id = %s"
Index: Clinic/bl_models/analysis_bl.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Clinic.dal_models.analysis_dal import AnalyseDAL\r\n\r\nclass AnalyseBL(object):\r\n    @staticmethod\r\n    def add_analyse(name: str, price: int, check_up_id: int):\r\n\r\n        analyse_id, error = AnalyseDAL.add_analyse(name, price, check_up_id)\r\n\r\n        if error is None:\r\n            return analyse_id, None\r\n\r\n        return
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Clinic/bl_models/analysis_bl.py b/Clinic/bl_models/analysis_bl.py
--- a/Clinic/bl_models/analysis_bl.py	(revision cac0f9a2f0a7b6225fa6b08e49bef11b1cb0d7f2)
+++ b/Clinic/bl_models/analysis_bl.py	(date 1736671890286)
@@ -1,12 +1,32 @@
 from Clinic.dal_models.analysis_dal import AnalyseDAL
 
+
 class AnalyseBL(object):
     @staticmethod
-    def add_analyse(name: str, price: int, check_up_id: int):
+    def get_analysis():
+        analysis_data, error = AnalyseDAL.get_analysis()
+        if error:
+            return None, error
 
-        analyse_id, error = AnalyseDAL.add_analyse(name, price, check_up_id)
+        # Преобразование кортежей в словари
+        keys = ["category_id", "category_name", "analysis_id", "analysis_name", "price"]
+        analysis_data = [dict(zip(keys, row)) for row in analysis_data]
 
-        if error is None:
-            return analyse_id, None
+        # Структурируем данные в JSON формат
+        result = {}
+        for row in analysis_data:
+            category_id = row["category_id"]
+            if category_id not in result:
+                result[category_id] = {
+                    "id": category_id,
+                    "name": row["category_name"],
+                    "analyses": []
+                }
 
-        return
\ No newline at end of file
+            result[category_id]["analyses"].append({
+                "id": row["analysis_id"],
+                "name": row["analysis_name"],
+                "price": row["price"]
+            })
+
+        return list(result.values()), None
